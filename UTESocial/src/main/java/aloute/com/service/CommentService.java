package aloute.com.service;

import aloute.com.entity.Comment;
import aloute.com.entity.Posts;
import aloute.com.entity.User;
import aloute.com.repository.CommentRepository;
import aloute.com.repository.common.PostsRepository;
import aloute.com.repository.UserRepository;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;

@Service
@Transactional
public class CommentService {

    private final CommentRepository commentRepo;
    private final PostsRepository postsRepo;
    private final UserRepository userRepo;

    public CommentService(CommentRepository commentRepo,
                          PostsRepository postsRepo,
                          UserRepository userRepo) {
        this.commentRepo = commentRepo;
        this.postsRepo = postsRepo;
        this.userRepo = userRepo;
    }

    // üì• T·∫°o b√¨nh lu·∫≠n m·ªõi ho·∫∑c reply
    public Comment createComment(Integer userId, Integer postId, Integer parentId, String content) {
        if (content == null || content.isBlank()) {
            throw new IllegalArgumentException("N·ªôi dung b√¨nh lu·∫≠n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }

        User user = userRepo.findById(userId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));
        Posts post = postsRepo.findById(postId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt"));

        Comment c = new Comment();
        c.setUser(user);
        c.setPost(post);
        c.setContent(content.trim());
        c.setCreatedAt(LocalDateTime.now());

        if (parentId != null) {
            Comment parent = commentRepo.findById(parentId)
                    .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n cha"));
            c.setParentComment(parent);
        }

        return commentRepo.save(c);
    }

    // üßæ L·∫•y b√¨nh lu·∫≠n g·ªëc c·ªßa b√†i vi·∫øt
    public List<Comment> getRootComments(Integer postId) {
        Posts post = postsRepo.findById(postId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt"));
        return commentRepo.findByPostAndParentCommentIsNullAndIsDeletedFalseOrderByCreatedAtAsc(post);
    }

    // üßæ L·∫•y reply c·ªßa m·ªôt b√¨nh lu·∫≠n
    public List<Comment> getReplies(Integer parentCommentId) {
        Comment parent = commentRepo.findById(parentCommentId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n cha"));
        return commentRepo.findByParentCommentAndIsDeletedFalseOrderByCreatedAtAsc(parent);
    }

    // ‚ù§Ô∏è Toggle Like (c·ªông/tr·ª´ likeCount)
    public int toggleLike(Integer commentId, boolean isLike) {
        Comment c = commentRepo.findById(commentId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n"));

        int current = c.getLikeCount();
        if (isLike) {
            c.setLikeCount(current + 1);
        } else {
            c.setLikeCount(Math.max(0, current - 1));
        }

        commentRepo.save(c);
        return c.getLikeCount();
    }

    // üóëÔ∏è Xo√° m·ªÅm
    public void softDelete(Integer commentId, Long currentUserId) {
        Comment c = commentRepo.findById(commentId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n"));

        if (!c.getUser().getUserId().equals(currentUserId)) {
            throw new SecurityException("B·∫°n kh√¥ng c√≥ quy·ªÅn xo√° b√¨nh lu·∫≠n n√†y");
        }

        c.setDeleted(true);
        commentRepo.save(c);
    }
}
